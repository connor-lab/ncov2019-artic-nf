// Illumina specific params

params {

    // Instead of using the ivar-compatible bed file in the scheme repo, the
    // full path to a previously-created ivar bed file. Must also supply
    // ref.
    bed = false

    // Instead of indexing the reference file in the scheme repo, the prefix
    // of previously-created reference index files. Must also supply bed.
    // (With these defined, none of the scheme* variables will be used.)
    ref = false

    // illumina fastq search path
    illuminaSuffixes = ['*_R{1,2}_001', '*_R{1,2}', '*_{1,2}' ]
    fastq_exts = ['.fastq.gz', '.fq.gz']

    fastqSearchPath = makeFastqSearchPath( params.illuminaSuffixes, params.fastq_exts )
    
    // Use cram input instead of fastq files
    cram = false
    
    // Output cram instead of bam files
    outCram = false

    // Allow reads that don't have primer sequence? Ligation prep = false, nextera = true
    allowNoprimer = true

    // Length of illumina reads to keep after primer trimming
    illuminaKeepLen = 30

    // Sliding window quality threshold for keeping reads after primer trimming (illumina)
    illuminaQualThreshold = 20

    // Mpileup depth for ivar (although undocumented in mpileup, setting to zero removes limit)
    mpileupDepth = 0

    // iVar frequency threshold for consensus variant (ivar consensus: -t)
    ivarFreqThreshold = 0.75

    // Minimum coverage depth to call variant (ivar consensus: -m; ivar variants -m)
    ivarMinDepth = 10

    // iVar frequency threshold to call variant (ivar variants: -t )
    ivarMinFreqThreshold = 0.25

    // iVar minimum mapQ to call variant (ivar variants: -q)
    ivarMinVariantQuality = 20

}

def makeFastqSearchPath ( illuminaSuffixes, fastq_exts ) {
    //if (! params.directory ) {
    //    println("Please supply a directory containing fastqs with --directory")
    //    System.exit(1)
    //}

    if ( params.directory ) {
      def fastq_searchpath = []
      for (item in illuminaSuffixes){
          for(thing in fastq_exts){
              fastq_searchpath.add(params.directory.toString() + '/**' + item.toString() + thing.toString())
          }
      }
      return fastq_searchpath
    }
}

